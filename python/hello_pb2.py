# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: hello.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='hello.proto',
  package='hello',
  syntax='proto3',
  serialized_pb=_b('\n\x0bhello.proto\x12\x05hello\"\x18\n\x08HelloReq\x12\x0c\n\x04Name\x18\x01 \x01(\t\"\x1b\n\tHelloResp\x12\x0e\n\x06Result\x18\x01 \x01(\t2\xab\x01\n\x0cHelloService\x12/\n\x08SayHello\x12\x0f.hello.HelloReq\x1a\x10.hello.HelloResp\"\x00\x12\x35\n\x0eSayHelloStrict\x12\x0f.hello.HelloReq\x1a\x10.hello.HelloResp\"\x00\x12\x33\n\x0cSayHelloFail\x12\x0f.hello.HelloReq\x1a\x10.hello.HelloResp\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_HELLOREQ = _descriptor.Descriptor(
  name='HelloReq',
  full_name='hello.HelloReq',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Name', full_name='hello.HelloReq.Name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=46,
)


_HELLORESP = _descriptor.Descriptor(
  name='HelloResp',
  full_name='hello.HelloResp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='Result', full_name='hello.HelloResp.Result', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=48,
  serialized_end=75,
)

DESCRIPTOR.message_types_by_name['HelloReq'] = _HELLOREQ
DESCRIPTOR.message_types_by_name['HelloResp'] = _HELLORESP

HelloReq = _reflection.GeneratedProtocolMessageType('HelloReq', (_message.Message,), dict(
  DESCRIPTOR = _HELLOREQ,
  __module__ = 'hello_pb2'
  # @@protoc_insertion_point(class_scope:hello.HelloReq)
  ))
_sym_db.RegisterMessage(HelloReq)

HelloResp = _reflection.GeneratedProtocolMessageType('HelloResp', (_message.Message,), dict(
  DESCRIPTOR = _HELLORESP,
  __module__ = 'hello_pb2'
  # @@protoc_insertion_point(class_scope:hello.HelloResp)
  ))
_sym_db.RegisterMessage(HelloResp)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class HelloServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.SayHello = channel.unary_unary(
          '/hello.HelloService/SayHello',
          request_serializer=HelloReq.SerializeToString,
          response_deserializer=HelloResp.FromString,
          )
      self.SayHelloStrict = channel.unary_unary(
          '/hello.HelloService/SayHelloStrict',
          request_serializer=HelloReq.SerializeToString,
          response_deserializer=HelloResp.FromString,
          )
      self.SayHelloFail = channel.unary_unary(
          '/hello.HelloService/SayHelloFail',
          request_serializer=HelloReq.SerializeToString,
          response_deserializer=HelloResp.FromString,
          )


  class HelloServiceServicer(object):

    def SayHello(self, request, context):
      """This thing just says Hello to anyone
      SayHello('Euler') -> Hello, Euler!
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SayHelloStrict(self, request, context):
      """Strict Version responds only to requests which have `Name` length
      less than 10 characters
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def SayHelloFail(self, request, context):
      """Fail version that runs into an exception
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_HelloServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'SayHello': grpc.unary_unary_rpc_method_handler(
            servicer.SayHello,
            request_deserializer=HelloReq.FromString,
            response_serializer=HelloResp.SerializeToString,
        ),
        'SayHelloStrict': grpc.unary_unary_rpc_method_handler(
            servicer.SayHelloStrict,
            request_deserializer=HelloReq.FromString,
            response_serializer=HelloResp.SerializeToString,
        ),
        'SayHelloFail': grpc.unary_unary_rpc_method_handler(
            servicer.SayHelloFail,
            request_deserializer=HelloReq.FromString,
            response_serializer=HelloResp.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'hello.HelloService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaHelloServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def SayHello(self, request, context):
      """This thing just says Hello to anyone
      SayHello('Euler') -> Hello, Euler!
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SayHelloStrict(self, request, context):
      """Strict Version responds only to requests which have `Name` length
      less than 10 characters
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def SayHelloFail(self, request, context):
      """Fail version that runs into an exception
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaHelloServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def SayHello(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """This thing just says Hello to anyone
      SayHello('Euler') -> Hello, Euler!
      """
      raise NotImplementedError()
    SayHello.future = None
    def SayHelloStrict(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Strict Version responds only to requests which have `Name` length
      less than 10 characters
      """
      raise NotImplementedError()
    SayHelloStrict.future = None
    def SayHelloFail(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Fail version that runs into an exception
      """
      raise NotImplementedError()
    SayHelloFail.future = None


  def beta_create_HelloService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('hello.HelloService', 'SayHello'): HelloReq.FromString,
      ('hello.HelloService', 'SayHelloFail'): HelloReq.FromString,
      ('hello.HelloService', 'SayHelloStrict'): HelloReq.FromString,
    }
    response_serializers = {
      ('hello.HelloService', 'SayHello'): HelloResp.SerializeToString,
      ('hello.HelloService', 'SayHelloFail'): HelloResp.SerializeToString,
      ('hello.HelloService', 'SayHelloStrict'): HelloResp.SerializeToString,
    }
    method_implementations = {
      ('hello.HelloService', 'SayHello'): face_utilities.unary_unary_inline(servicer.SayHello),
      ('hello.HelloService', 'SayHelloFail'): face_utilities.unary_unary_inline(servicer.SayHelloFail),
      ('hello.HelloService', 'SayHelloStrict'): face_utilities.unary_unary_inline(servicer.SayHelloStrict),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_HelloService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('hello.HelloService', 'SayHello'): HelloReq.SerializeToString,
      ('hello.HelloService', 'SayHelloFail'): HelloReq.SerializeToString,
      ('hello.HelloService', 'SayHelloStrict'): HelloReq.SerializeToString,
    }
    response_deserializers = {
      ('hello.HelloService', 'SayHello'): HelloResp.FromString,
      ('hello.HelloService', 'SayHelloFail'): HelloResp.FromString,
      ('hello.HelloService', 'SayHelloStrict'): HelloResp.FromString,
    }
    cardinalities = {
      'SayHello': cardinality.Cardinality.UNARY_UNARY,
      'SayHelloFail': cardinality.Cardinality.UNARY_UNARY,
      'SayHelloStrict': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'hello.HelloService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
